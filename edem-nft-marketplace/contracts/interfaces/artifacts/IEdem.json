{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"goerli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"linkReferences": {},
			"object": "",
			"opcodes": "",
			"sourceMap": ""
		},
		"deployedBytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"immutableReferences": {},
			"linkReferences": {},
			"object": "",
			"opcodes": "",
			"sourceMap": ""
		},
		"gasEstimates": null,
		"methodIdentifiers": {
			"proposerPay((bool,address,uint256,uint256),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint8,bytes32,bytes32))": "93a4be75",
			"proposerPayETH((bool,address,uint256,uint256),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint8,bytes32,bytes32))": "f4195742",
			"proposerPayETHAndWETH((bool,address,uint256,uint256),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint8,bytes32,bytes32))": "076e5718",
			"suggestApprove((bool,address,uint256,uint256),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint8,bytes32,bytes32))": "2ef19e0d"
		}
	},
	"abi": [
		{
			"inputs": [
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "takerAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						}
					],
					"internalType": "struct MarketTypes.User",
					"name": "userProposer",
					"type": "tuple"
				},
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "edemSigner",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "collection",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "nftAmount",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "protocolAddress",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "tradeTokenAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "nonce",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "startTime",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "endTime",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}
					],
					"internalType": "struct MarketTypes.MarketPlace",
					"name": "marketSeller",
					"type": "tuple"
				}
			],
			"name": "proposerPay",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "takerAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						}
					],
					"internalType": "struct MarketTypes.User",
					"name": "userProposer",
					"type": "tuple"
				},
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "edemSigner",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "collection",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "nftAmount",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "protocolAddress",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "tradeTokenAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "nonce",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "startTime",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "endTime",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}
					],
					"internalType": "struct MarketTypes.MarketPlace",
					"name": "marketSeller",
					"type": "tuple"
				}
			],
			"name": "proposerPayETH",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "takerAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						}
					],
					"internalType": "struct MarketTypes.User",
					"name": "userProposer",
					"type": "tuple"
				},
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "edemSigner",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "collection",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "nftAmount",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "protocolAddress",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "tradeTokenAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "nonce",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "startTime",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "endTime",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}
					],
					"internalType": "struct MarketTypes.MarketPlace",
					"name": "marketSeller",
					"type": "tuple"
				}
			],
			"name": "proposerPayETHAndWETH",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "takerAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						}
					],
					"internalType": "struct MarketTypes.User",
					"name": "userSeller",
					"type": "tuple"
				},
				{
					"components": [
						{
							"internalType": "bool",
							"name": "isDealer",
							"type": "bool"
						},
						{
							"internalType": "address",
							"name": "edemSigner",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "collection",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "tokenId",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "nftAmount",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "price",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "protocolAddress",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "tradeTokenAddress",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "nonce",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "startTime",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "endTime",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}
					],
					"internalType": "struct MarketTypes.MarketPlace",
					"name": "marketProposer",
					"type": "tuple"
				}
			],
			"name": "suggestApprove",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	]
}